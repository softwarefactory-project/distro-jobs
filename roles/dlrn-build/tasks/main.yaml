---
- name: Delete data directory if exist
  file:
    path: "{{ dlrn_data }}"
    state: absent

- name: Create data directory
  file:
    path: "{{ dlrn_data }}"
    state: directory

- name: Copy target mock cfg
  copy:
    src: "{{ ansible_user_dir }}/{{ dlrn_project }}.cfg"
    dest: "{{ working_dir }}/{{ dlrn_project }}.cfg"
    remote_src: true

- name: Add intermediary repositories from changes ahead
  blockinfile:
    path: "{{ working_dir }}/{{ dlrn_project }}.cfg"
    marker: ''
    insertafter: '# SPECULATIVE REPO HERE'
    content: |
      {% for artifact in zuul.artifacts|default([]) %}{% if artifact.name == 'dlrn-repo' %}
      [{{ artifact.project }}-{{ artifact.change }}-{{ artifact.patchset }}]
      name={{ artifact.project }}-{{ artifact.change }}-{{ artifact.patchset }}
      enabled=1
      baseurl={{ artifact.url }}/current
      gpgcheck=0

      {% endif %}{% endfor %}

- name: Prepare source and distgit source in the data directory
  when: dlrn_info_type == 'rdoinfo'
  block:
    - name: Get project info
      command: "{{ rdopkg }} findpkg {{ zuul.project.name }} -l {{ rdoinfo_dir }}"
      register: result_info

    - set_fact:
        project_info: "{{ result_info.stdout | from_yaml }}"

    - name: Copy distgit in data directory
      shell:
        cmd: "ln -s {{ ansible_user_dir }}/{{ zuul.project.src_dir }} {{ dlrn_data }}/{{ project_info['name'] }}_distro"
      when: zuul.project.name is match(".*-distgit$") or project_info['upstream'] == project_info['distgit']

    - name: Copy source in data directory
      shell:
        cmd: "ln -s {{ ansible_user_dir }}/{{ zuul.project.src_dir }} {{ dlrn_data }}/{{ project_info['name'] }}"
      when: not zuul.project.name is match(".*-distgit$") or project_info['upstream'] == project_info['distgit']

- name: Set project.ini values according to current config
  template:
    src: "projects.ini.j2"
    dest: "{{ working_dir }}/projects.ini"

- name: Clean previous commits.sqlite
  file:
    path: "{{ working_dir }}/commits.sqlite"
    state: absent

- name: Run DLRN build (rdoinfo driver)
  when: dlrn_info_type == 'rdoinfo'
  command: >
    {{ dlrn }} --config-file projects.ini
         --package-name {{ project_info['name'] }}
         --use-public
         --local
         --info-repo {{ rdoinfo_dir }}
         --verbose-build
  args:
    chdir: "{{ working_dir }}"
  ignore_errors: yes
  register: dlrnbuild

- name: Run DLRN build (local driver)
  when: dlrn_info_type == 'local'
  command: >
    {{ dlrn }} --config-file {{ working_dir }}/projects.ini
         --verbose-build
  args:
    chdir: "{{ ansible_user_dir }}/{{ zuul.project.src_dir }}"
  ignore_errors: yes
  register: dlrnbuild

- name: Make sure current link is set
  shell:
    cmd: "test -L current || ln -s $(dirname $(find . -name commit.yaml)) current"
  args:
    chdir: "{{ dlrn_data }}/repos"

# In the post pipeline we want to continue on the dependent
# dlrn-publish job to export the failed commits.yaml to the API
- name: Fail under context conditions
  fail:
    msg: "DLRN build failed"
  when: dlrnbuild.rc != 0
